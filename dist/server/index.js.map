{"version":3,"sources":["../../server/index.js"],"names":["Promise","require","connect","db","connection","on","console","error","bind","once","log","app","compiler","use","hot","publicPath","output","noInfo","json","post","req","res","body","isValid","errors","status","name","email","password","password_digest","hashSync","find","$or","then","result","length","forEach","item","user","save","token","sign","id","_id","configJwt","catch","global","compareSync","get","sendFile","join","__dirname","listen"],"mappings":"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","file":"index.js","sourcesContent":["import express from 'express';\r\nimport path from 'path';\r\nimport webpack from 'webpack';\r\nimport webpackConfig from '../webpack.dev.config';\r\nimport webpackHotMiddleware from 'webpack-hot-middleware';\r\nimport webpackMiddleware from 'webpack-dev-middleware';\r\nimport bodyParser from 'body-parser';\r\n\r\nimport ValidateInput from '../client/components/common/ValidateInput';\r\nimport User from './models/User';\r\nimport mongoose from 'mongoose';\r\nmongoose.Promise = require('bluebird');\r\n\r\nmongoose.connect('mongodb://localhost/SimpleLoginApp');\r\nlet db = mongoose.connection;\r\ndb.on('error', console.error.bind(console, 'connection error:'));\r\ndb.once('open', function() {\r\n    console.log('success connect to MongoDB')\r\n});\r\nimport bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport configJwt from './configJwt';\r\n\r\n\r\nconst app = express();\r\nlet compiler = webpack(webpackConfig);\r\n\r\napp.use(webpackMiddleware(compiler, {\r\n    hot: true,\r\n    publicPath: webpackConfig.output.publicPath,\r\n    noInfo: true\r\n}));\r\napp.use(webpackHotMiddleware(compiler));\r\napp.use(bodyParser.json());\r\n\r\napp.post('/new-user', (req, res) => {\r\n    let {isValid, errors} = ValidateInput(req.body);\r\n    if (!isValid) {\r\n        res.status(400).json(errors);\r\n        return;\r\n    };\r\n    const {name, email, password} = req.body;\r\n    const  password_digest = bcrypt.hashSync(password, 10);\r\n\r\n   User.find({ $or: [{name: req.body.name}, {email: req.body.email}] })\r\n       .then(result => {\r\n           if(result.length > 0) {\r\n               let errors = {};\r\n               result.forEach(item => {\r\n                   if(item.name === req.body.name) errors.name = 'Name already exist';\r\n                   if(item.email === req.body.email) errors.email = 'E-mail already exist';\r\n                   res.status(400).json(errors)\r\n               });\r\n           } else {\r\n               let user = new User({name, email,  password_digest});\r\n               user.save().then(result => {\r\n                   let token = jwt.sign({\r\n                       id: user._id,\r\n                       name: user.name\r\n                   }, configJwt.configJwt);\r\n                   res.json({token});\r\n               }).catch(err => res.status(500).json({ global: 'Cant save new user' }))\r\n           }\r\n       }).catch(err => res.status(500).json({ global: 'Cant connect to DataBase' }));\r\n});\r\n\r\napp.post('/login', (req, res) => {\r\n    let {isValid, errors} = ValidateInput(req.body);\r\n    if (!isValid) {\r\n        res.status(400).json(errors);\r\n        return;\r\n    };\r\n\r\n    const {name, password} = req.body;\r\n    User.find({ $or: [{name: name}, {email: name}] })\r\n        .then(result => {\r\n            if(result.length > 0) {\r\n                result.forEach(user => {\r\n                    if(bcrypt.compareSync(password, user.password_digest)) {\r\n                        let token = jwt.sign({\r\n                            id: user._id,\r\n                            name: user.name\r\n                        }, configJwt.configJwt);\r\n                        res.json({token});\r\n                    } else {\r\n                        res.status(401).json({password: 'Password is not correct'})\r\n                    }\r\n                })\r\n            } else {\r\n                res.status(401).json({ global: 'This user is not exist' })\r\n            }\r\n        }).catch(err => res.status(500).json({ global: 'Cant connect to DataBase' }))\r\n});\r\n\r\napp.get('/*', (req, res) => {\r\n    res.sendFile(path.join(__dirname, 'index.html'))\r\n});\r\n\r\n\r\napp.listen(3000, () => console.log('Server run on 3000 port'));\r\n\r\n\r\n\r\n\r\n\r\n"]}